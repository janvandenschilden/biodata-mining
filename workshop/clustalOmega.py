#!/usr/bin/env python
# -*- coding: utf-8 -*-

#------------------------------------------------------------------------------
#   Import all the libraries
#------------------------------------------------------------------------------

from selenium import webdriver
import os
from time import sleep
from download import download


#------------------------------------------------------------------------------
#   Functions
#------------------------------------------------------------------------------
def openWebDriver():
    """Opens a webdriever
    
    Returns
    -------
    selenium.webdriver object
        Variable with webdriver object
    """
    return webdriver.Firefox()

def openClustalOmegaURL(webDriver):
    """Given webdriver opens given URL
    
    Parameters
    ----------
    webDriver : selenium.webdriver object
        Given webdriver for specific browser (e.g. Firefox)
    """
    webDriver.get("https://www.ebi.ac.uk/Tools/msa/clustalo/")
 

def uploadFasta(webDriver, fasta):
    """Uploads fasta file
    
    Parameters
    ----------
    webDriver : selenium.webdriver object
        Given webdriver for specific browser (e.g. Firefox)
    fasta : str
        Path of fasta file
    """
    uploadFileField = webDriver.find_element_by_id("upfile")
    fastaPath=os.path.realpath(fasta)
    uploadFileField.send_keys(fastaPath)

def removeBanner(webDriver):
    """Remove Banner
    
    Parameters
    ----------
    webDriver : selenium.webdriver object
        Given webdriver for specific browser (e.g. Firefox)
    """
    try: 
        webDriver.find_element_by_id("data-protection-agree").click()
    except:
        pass    

def setOutputFormat(webDriver, outputFormat="Pearson/FASTA"):
    """Selects output format
    
    Parameters
    ----------
    webDriver : selenium.webdriver object
        Given webdriver for specific browser (e.g. Firefox)
    ouputFormat : str
        format of MSA output
    """
    field = webDriver.find_element_by_id("outfmt")
    for option in field.find_elements_by_tag_name('option'):
        if option.text==outputFormat:
            option.click()
            break
 
def submit(webDriver):
    """Push submit button
    
    Parameters
    ----------
    webDriver : selenium.webdriver object
        Given webdriver for specific browser (e.g. Firefox)
    """
    submitButtons = webDriver.find_elements_by_name("submit")   
    #--------------------------------------------------------------------------
    #   There are 2 elements with the name "submit" in it. The second one is 
    #   the push button. This one is selected and clicked.
    #--------------------------------------------------------------------------
    submitButton = submitButtons[1]                             
    submitButton.click()

def waitForPageRefresh(webDriver):
    """ Checks whether the page has been refreshed
    
    Parameters
    ----------
    webDriver : selenium.webdriver object
        Given webdriver for specific browser (e.g. Firefox)
    """
    while webDriver.title.startswith("Job running"):
        sleep(0.1)
        
def goToResultSummary(webDriver):
    ''' Go to result "Summary section" on page
    
    Clustalomega results has multiple sections. The downloadable files are 
    found in the "Result Summary" section.

    Parameters
    ----------
    webDriver : selenium.webdriver object
        Given webdriver for specific browser (e.g. Firefox)
    '''
    for i in range(10):
        try:
            resultSummaryLink=webDriver.find_element_by_id("text-summary")
            resultSummaryLink.click()
            break
        except:
            try:
                resultSummaryLink=webDriver.find_element_by_id("summary")
                resultSummaryLink.click()
            except:
                sleep(1)
                if i>=9:
                    raise "Unable to go to Result Summary section"


def downloadMsaFastaPim(webDriver, baseName):
    """Download Fasta and Pim file generated by MSA
    
    Parameters
    ----------
    webDriver : selenium.webdriver object
        Given webdriver for specific browser (e.g. Firefox)
        
    baseName : str
        base name (without extension) given to the output files.
        
    Returns
    -------
    list
        List with output files: fasta,pim
    """ 
    for dd in webDriver.find_elements_by_tag_name("dd"):
        link = dd.find_element_by_tag_name("a").get_attribute("href")
        if link.endswith("fasta"):
            outputFasta =baseName+".fasta"
            download(link, outputFasta)
        elif link.endswith("pim"):
            outputPim = baseName+".pim"
            download(link,outputPim)
    return outputFasta,outputPim

def closeDriver(webDriver):
    """Closes the webbrowser and driver
    
    Parameters
    ----------
    webDriver : selenium.webdriver object
        Given webdriver for specific browser (e.g. Firefox)
        
    Returns
    -------
    list
        List with output files: fasta,pim
    """
    webDriver.quit()
   
def clustalOmega(fasta, outputFormat="Pearson/FASTA"):
    for i in range(10):
        try:
            #--------------------------------------------------------------------------
            #   Main Code
            #--------------------------------------------------------------------------
            driver= openWebDriver()
            openClustalOmegaURL(driver)
            uploadFasta(driver,fasta)
            removeBanner(driver)
            setOutputFormat(driver, outputFormat=outputFormat)
            submit(driver)
            waitForPageRefresh(driver)
            goToResultSummary(driver)
            baseName=fasta.replace(".fasta","")+"_Clustalomega"
            fasta, pim = downloadMsaFastaPim(driver, baseName)
            closeDriver(driver)
            try:
                os.remove("geckodriver.log")
            except:
                pass
            #--------------------------------------------------------------------------
            #   Return result
            #--------------------------------------------------------------------------
            if os.path.getsize(fasta)==0 or os.path.getsize(pim)==0:
                raise
            else:
                return fasta, pim
        except:
            print("try",i,"failed")
            sleep(1)
